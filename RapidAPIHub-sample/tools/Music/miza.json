{
    "product_id": "api_a7635b04-7f80-4df5-8b98-38ae91285543",
    "tool_description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "home_url": "https://rapidapi.com/thomas-xin/api/miza/",
    "name": "Miza",
    "title": "Miza",
    "pricing": "FREEMIUM",
    "tool_name": "Miza",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 2155,
        "avgSuccessRate": 0,
        "popularityScore": 0,
        "__typename": "Score"
    },
    "host": "miza.p.rapidapi.com",
    "api_list": [
        {
            "name": "Retrieve file",
            "url": "https://miza.p.rapidapi.com/d/ABCDEF",
            "description": "Retrieves a file hosted by the server. This link is usually obtained by replacing the /p/ path in the /merge and /edit endpoint responses with /f/ or /d/. The request fails if the file requested does not exist or has been deleted.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "path",
                    "type": "string",
                    "description": "",
                    "default": "ABCDEF"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/d/ABCDEF\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/d/{path}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "IP address check",
            "url": "https://miza.p.rapidapi.com/ip",
            "description": "Retrieves the host (server) and remote (your) IP addresses. A fast and responsive endpoint that is also handy for checking whether the service is online.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ip\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ip\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Song download/convert",
            "url": "https://miza.p.rapidapi.com/ytdl",
            "description": "Searches, downloads, converts, and uploads the song URL simultaneously, streaming the file with very little delay. Song URL may be from any platform supported by Youtube-DL/FFmpeg, which are used as part of the backend.\nThis endpoint is the fastest to respond out of all the available ones for song downloading, but will only support *mp3*, *opus*, *ogg*, and *wav* as output formats (no video downloading). Quality will be maximum by default, or 224kbps if conversion is required. For those wishing to use this API as a backend for their own Discord bot, the opus format output is compatible with direct playback through Discord's voice websocket.\nFor testing purposes, the *download* query key may be changed to *view*, which will stream the same file, but without the attachment disposition, allowing it to play as audio in a browser while being downloaded.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "download",
                    "type": "STRING",
                    "description": "",
                    "default": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
                }
            ],
            "optional_parameters": [
                {
                    "name": "fmt",
                    "type": "STRING",
                    "description": "",
                    "default": "opus"
                }
            ],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"download\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\", \"fmt\": \"opus\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"download\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\", \"fmt\": \"opus\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Song trimming/extending",
            "url": "https://miza.p.rapidapi.com/ytdlp",
            "description": "Trims a song or video, outputting as a URL (similar to the concatenation function). Like the output from concat, one must send a GET request to the URL returned in order to retrieve the actual output.\nSpecify trim start and end after the URL, optionally omitting them by replacing them with an empty string or dash (-). Accepts input in number of seconds, as well as time formats such as *2h30m* or *1:53:30*.\nIf the trim end passes the end of the song, it will automatically be extended by looping back from the beginning. This is *much* faster than concatenating multiple copies of the same song, as it skips re-encoding every single copy, allowing it to produce 10-hour extensions of songs or videos in seconds. Output format can additionally be specified after trim end.\nSee https://mizabot.xyz/downloader for more info as well as test usage of this endpoint.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "",
                    "default": "https://www.youtube.com/watch?v=IgOci6JXPIc"
                }
            ],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "STRING",
                    "description": "",
                    "default": "-"
                },
                {
                    "name": "fmt",
                    "type": "STRING",
                    "description": "",
                    "default": "mp3"
                },
                {
                    "name": "end",
                    "type": "STRING",
                    "description": "",
                    "default": "45m"
                }
            ],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlp\"\nquerystring = {\"start\": \"-\", \"fmt\": \"mp3\", \"end\": \"45m\", \"url\": \"https://www.youtube.com/watch?v=IgOci6JXPIc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlp\"\nquerystring = {\"start\": \"-\", \"fmt\": \"mp3\", \"end\": \"45m\", \"url\": \"https://www.youtube.com/watch?v=IgOci6JXPIc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Song search",
            "url": "https://miza.p.rapidapi.com/ytdl",
            "description": "Searches for a song from popular song platforms.\nThe API will search YouTube for the item by default. Prepend *scsearch:* to the search term to specify a search from SoundCloud, *spsearch:* for Spotify, or *bcsearch:* for BandCamp.\nUnlike all other endpoints provided by this API, this endpoint can actually be used infinitely free of charge or quota. Simply direct your request directly to [http://i.mizabot.xyz/ytdl?search=](http://i.mizabot.xyz/ytdl?search=) instead of rapidapi's forwarded URL. This may be done for all other endpoints too, however there will be a rate limit in place.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "search",
                    "type": "STRING",
                    "description": "",
                    "default": "Despacito"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": \"Despacito\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": \"Despacito\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Song concatenation",
            "url": "https://miza.p.rapidapi.com/ytdlc",
            "description": "Joins one or more audio or video files into a single file.\nInputs are specified by URLs specified by query parameters \"u1\", \"u2\", etc. These URLs may be playlists, which will perform the concat operation on all contained tracks.\nOutput format supports most video and audio formats. See https://mizabot.xyz/downloader for list of available formats, as well as test usage of this API.\nMay or may not be the same input format, codec, or framerate/resolution/aspect ratio (if it is a video), but will take much longer to provide a response compared to the download endpoint, because it must finish all conversion before it can begin streaming.\nRedirects to a URL which will return the output file. This download link will be reusable, but temporary.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "u1",
                    "type": "STRING",
                    "description": "",
                    "default": "https://www.youtube.com/watch?v=0zXcC-haBFc"
                }
            ],
            "optional_parameters": [
                {
                    "name": "u3",
                    "type": "STRING",
                    "description": "",
                    "default": "https://cdn.discordapp.com/attachments/688253918890688521/829266927003107338/paladin.ogg"
                },
                {
                    "name": "fmt",
                    "type": "STRING",
                    "description": "",
                    "default": "ogg"
                },
                {
                    "name": "u2",
                    "type": "STRING",
                    "description": "",
                    "default": "http://i.mizabot.xyz/d/Bc5SdZDrKg"
                }
            ],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlc\"\nquerystring = {\"u3\": \"https://cdn.discordapp.com/attachments/688253918890688521/829266927003107338/paladin.ogg\", \"u1\": \"https://www.youtube.com/watch?v=0zXcC-haBFc\", \"fmt\": \"ogg\", \"u2\": \"http://i.mizabot.xyz/d/Bc5SdZDrKg\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlc\"\nquerystring = {\"u3\": \"https://cdn.discordapp.com/attachments/688253918890688521/829266927003107338/paladin.ogg\", \"u1\": \"https://www.youtube.com/watch?v=0zXcC-haBFc\", \"fmt\": \"ogg\", \"u2\": \"http://i.mizabot.xyz/d/Bc5SdZDrKg\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Playlist extraction",
            "url": "https://miza.p.rapidapi.com/ytdl",
            "description": "Produces information on all songs in a playlist (YouTube, Spotify, SoundCloud, etc), with much faster response time than most other available tools. Currently O(1) for YouTube, O(log n) for Spotify, and O(log n) for SoundCloud. See [this article](http://i.mizabot.xyz/f/Bc9AUlCRkA) for the algorithm behind the YouTube playlists specifically.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "search",
                    "type": "STRING",
                    "description": "",
                    "default": "https://www.youtube.com/playlist?list=PLXFwTY00FRUUZzL_Vjhy-bE8WIao3eyOi"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": \"https://www.youtube.com/playlist?list=PLXFwTY00FRUUZzL_Vjhy-bE8WIao3eyOi\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": \"https://www.youtube.com/playlist?list=PLXFwTY00FRUUZzL_Vjhy-bE8WIao3eyOi\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ],
    "standardized_name": "miza"
}